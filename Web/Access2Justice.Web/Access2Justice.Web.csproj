<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <CodeAnalysisRuleSet>..\Access2Justice.Shared\DotNetStandard.ruleset</CodeAnalysisRuleSet>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <UserSecretsId>f42be599-a3e0-45e7-b6e3-3f6dd3cf99a3</UserSecretsId>
    <ApplicationInsightsResourceId>/subscriptions/892808ef-ec24-447c-9441-2a832d7a3d04/resourcegroups/A2J-develop-rg/providers/microsoft.insights/components/Access2JusticeApiAppInsights</ApplicationInsightsResourceId>
    <ApplicationInsightsAnnotationResourceId>/subscriptions/892808ef-ec24-447c-9441-2a832d7a3d04/resourcegroups/A2J-develop-rg/providers/microsoft.insights/components/Access2JusticeApiAppInsights</ApplicationInsightsAnnotationResourceId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.ApplicationInsights.AspNetCore" Version="2.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.8" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="2.0.0" />
    <PackageReference Include="Microsoft.Azure.KeyVault" Version="3.0.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.6.0" />
    <PackageReference Include="Microsoft.IdentityModel.Clients.ActiveDirectory" Version="3.19.8" />
  </ItemGroup>

  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.1" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="ClientApp\src\app\shared\link.directive.spec.ts" />
    <None Remove="ClientApp\src\app\shared\link.directive.spec.ts" />
    <None Remove="ClientApp\src\app\shared\link.directive.ts" />
    <None Remove="ClientApp\src\app\shared\link.directive.ts" />
    <None Remove="ClientApp\src\app\shared\sidebars\map-results.service.ts" />
    <None Remove="ClientApp\src\app\topics-resources\itopic.ts" />
    <None Remove="ClientApp\src\app\topics-resources\itopic.ts" />
    <None Remove="ClientApp\src\app\topics-resources\mock-topics.ts" />
    <None Remove="ClientApp\src\app\topics-resources\mock-topics.ts" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="ClientApp\src\app\shared\search\" />
    <Folder Include="Properties\" />
  </ItemGroup>

  <ItemGroup>
    <WCFMetadata Include="Connected Services" />
  </ItemGroup>

   <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
	<Exec WorkingDirectory="$(SpaRoot)" Command="
IF EXIST dist-dev RMDIR /S /Q dist-dev
IF EXIST dist-stage RMDIR /S /Q dist-stage
IF EXIST dist-prod RMDIR /S /Q dist-prod
	" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:dev" />
	<Exec WorkingDirectory="$(SpaRoot)" Command="MOVE /Y dist dist-dev" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:stage" />
	<Exec WorkingDirectory="$(SpaRoot)" Command="MOVE /Y dist dist-stage" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:prod" />
	<Exec WorkingDirectory="$(SpaRoot)" Command="MOVE /Y dist dist-prod" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist-*\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
